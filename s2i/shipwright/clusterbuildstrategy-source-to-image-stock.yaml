apiVersion: shipwright.io/v1beta1
kind: ClusterBuildStrategy
metadata:
  annotations:
  name: byok
spec:
  parameters:
  - defaults: []
    description: The registries that need to block pull access.
    name: registries-block
    type: array
  - defaults: []
    description: The fully-qualified name of insecure registries. An insecure registry
      is one that does not have a valid SSL certificate or only supports HTTP.
    name: registries-insecure
    type: array
  - defaults:
    - registry.redhat.io
    - quay.io
    description: The registries for searching short name images such as `golang:latest`.
    name: registries-search
    type: array
  - default: vfs
    description: The storage driver to use, such as 'overlay' or 'vfs'.
    name: storage-driver
    type: string
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  steps:
  - name: s2i-generate
    image: quay.io/syedriko/byok-s2i:9
    command:
    - /bin/bash
    args:
      - -c
      - |
          set -euo pipefail
          python3.11 /workdir/generate_embeddings_tool.py -i "$1" -emd /workdir/embeddings_model \
            -emn sentence-transformers/all-mpnet-base-v2 -o vector_db -id vector_db_index
          cp -r vector_db /s2i
          cat <<EOF >> /s2i/Containerfile
          FROM registry.access.redhat.com/ubi9/ubi:latest
          COPY vector_db /rag/vector_db
          EOF

          find /s2i -ls
      # That's the separator between the shell script and its args
      - --
      - $(params.shp-source-context)
    resources: {}
    volumeMounts:
    - mountPath: /s2i
      name: s2i
    - mountPath: /etc/pki/entitlement
      name: etc-pki-entitlement
    workingDir: $(params.shp-source-root)
  - args:
    - -c
    - |
      set -euo pipefail

      # Parse parameters
      image=
      target=
      registriesBlock=""
      inRegistriesBlock=false
      registriesInsecure=""
      inRegistriesInsecure=false
      registriesSearch=""
      inRegistriesSearch=false
      while [[ $# -gt 0 ]]; do
        arg="$1"
        shift

        if [ "${arg}" == "--image" ]; then
          inRegistriesBlock=false
          inRegistriesInsecure=false
          inRegistriesSearch=false
          image="$1"
          shift
        elif [ "${arg}" == "--target" ]; then
          inBuildArgs=false
          inRegistriesBlock=false
          inRegistriesInsecure=false
          inRegistriesSearch=false
          target="$1"
          shift
        elif [ "${arg}" == "--registries-block" ]; then
          inRegistriesBlock=true
          inRegistriesInsecure=false
          inRegistriesSearch=false
        elif [ "${arg}" == "--registries-insecure" ]; then
          inRegistriesInsecure=true
          inRegistriesBlock=false
          inRegistriesSearch=false
        elif [ "${arg}" == "--registries-search" ]; then
          inRegistriesSearch=true
          inRegistriesBlock=false
          inRegistriesInsecure=false
        elif [ "${inRegistriesBlock}" == "true" ]; then
          registriesBlock="${registriesBlock}'${arg}', "
        elif [ "${inRegistriesInsecure}" == "true" ]; then
          registriesInsecure="${registriesInsecure}'${arg}', "
        elif [ "${inRegistriesSearch}" == "true" ]; then
          registriesSearch="${registriesSearch}'${arg}', "
        else
          echo "Invalid usage"
          exit 1
        fi
      done

      echo "[INFO] Creating registries config file..."
      if [ "${registriesSearch}" != "" ]; then
        cat <<EOF >>/tmp/registries.conf
      [registries.search]
      registries = [${registriesSearch::-2}]

      EOF
      fi
      if [ "${registriesInsecure}" != "" ]; then
        cat <<EOF >>/tmp/registries.conf
      [registries.insecure]
      registries = [${registriesInsecure::-2}]

      EOF
      fi
      if [ "${registriesBlock}" != "" ]; then
        cat <<EOF >>/tmp/registries.conf
      [registries.block]
      registries = [${registriesBlock::-2}]

      EOF
      fi

      # Building the image
      echo "[INFO] Building image ${image}"
      buildah --storage-driver=$(params.storage-driver) bud \
        --registries-conf=/tmp/registries.conf \
        --tag="${image}" -f /s2i/Containerfile /s2i

      # Push the image
      echo "[INFO] Pushing image ${image}"
      buildah --storage-driver=$(params.storage-driver) push \
        --digestfile='$(results.shp-image-digest.path)' \
        "${image}" \
        "docker://${image}"
    - --
    - --image
    - $(params.shp-output-image)
    - --registries-block
    - $(params.registries-block[*])
    - --registries-insecure
    - $(params.registries-insecure[*])
    - --registries-search
    - $(params.registries-search[*])
    command:
    - /bin/bash
    image: registry.redhat.io/ubi9/buildah@sha256:6886997da8c92214e99e3e8da47a0f08239172d2544b4edae058d5cb018effab
    name: buildah
    resources: {}
    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /s2i
      name: s2i
    - mountPath: /etc/pki/entitlement
      name: etc-pki-entitlement
    workingDir: /s2i
  volumes:
  - emptyDir: {}
    name: s2i
  - emptyDir: {}
    name: etc-pki-entitlement
    overridable: true

