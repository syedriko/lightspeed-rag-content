# Installing Knative Eventing


To use event-driven architecture on your cluster, install Knative Eventing. You can create Knative components such as event sources, brokers, and channels and then use them to send events to applications or external systems.
After you install the OpenShift Serverless Operator, you can install Knative Eventing by using the default settings, or configure more advanced settings in the KnativeEventing custom resource (CR). For more information about configuration options for the KnativeEventing CR, see Global configuration.

[IMPORTANT]
----
If you want to use Red Hat OpenShift distributed tracing with OpenShift Serverless, you must install and configure Red Hat OpenShift distributed tracing before you install Knative Eventing.
----

# Installing Knative Eventing by using the web console

After you install the OpenShift Serverless Operator, install Knative Eventing by using the OpenShift Container Platform web console. You can install Knative Eventing by using the default settings or configure more advanced settings in the KnativeEventing custom resource (CR).

* You have cluster administrator permissions on OpenShift Container Platform, or you have cluster or dedicated administrator permissions on Red Hat OpenShift Service on AWS or OpenShift Dedicated.
* You have logged in to the OpenShift Container Platform web console.
* You have installed the OpenShift Serverless Operator.

1. In the Administrator perspective of the OpenShift Container Platform web console, navigate to Operators â†’ Installed Operators.
2. Check that the Project dropdown at the top of the page is set to Project: knative-eventing.
3. Click Knative Eventing in the list of Provided APIs for the OpenShift Serverless Operator to go to the Knative Eventing tab.
4. Click Create Knative Eventing.
5. In the Create Knative Eventing page, you can configure the KnativeEventing object by using either the form provided, or by editing the YAML file.
* Use the form for simpler configurations that do not require full control of KnativeEventing object creation.
6. Click Create.
* Edit the YAML file for more complex configurations that require full control of KnativeEventing object creation. To access the YAML editor, click edit YAML on the Create Knative Eventing page.
7. After you have installed Knative Eventing, the KnativeEventing object is created, and you are automatically directed to the Knative Eventing tab. You will see the knative-eventing custom resource in the list of resources.

1. Click on the knative-eventing custom resource in the Knative Eventing tab.
2. You are automatically directed to the Knative Eventing Overview page.
![Knative Eventing Overview page]
3. Scroll down to look at the list of Conditions.
4. You should see a list of conditions with a status of True, as shown in the example image.
![Conditions]

[NOTE]
----
It may take a few seconds for the Knative Eventing resources to be created. You can check their status in the Resources tab.
----
5. If the conditions have a status of Unknown or False, wait a few moments and then check again after you have confirmed that the resources have been created.

# Installing Knative Eventing by using YAML

After you install the OpenShift Serverless Operator, you can install Knative Eventing by using the default settings, or configure more advanced settings in the KnativeEventing custom resource (CR). You can use the following procedure to install Knative Eventing by using YAML files and the oc CLI.

* You have cluster administrator permissions on OpenShift Container Platform, or you have cluster or dedicated administrator permissions on Red Hat OpenShift Service on AWS or OpenShift Dedicated.
* You have installed the OpenShift Serverless Operator.
* Install the OpenShift CLI (oc).

1. Create a file named eventing.yaml.
2. Copy the following sample YAML into eventing.yaml:

```yaml
apiVersion: operator.knative.dev/v1beta1
kind: KnativeEventing
metadata:
    name: knative-eventing
    namespace: knative-eventing
```

3. Optional. Make any changes to the YAML that you want to implement for your Knative Eventing deployment.
4. Apply the eventing.yaml file by entering:

```terminal
$ oc apply -f eventing.yaml
```


1. Verify the installation is complete by entering the following command and observing the output:

```terminal
$ oc get knativeeventing.operator.knative.dev/knative-eventing \
  -n knative-eventing \
  --template='{{range .status.conditions}}{{printf "%s=%s\n" .type .status}}{{end}}'
```

Example output

```terminal
InstallSucceeded=True
Ready=True
```


[NOTE]
----
It may take a few seconds for the Knative Eventing resources to be created.
----
2. If the conditions have a status of Unknown or False, wait a few moments and then check again after you have confirmed that the resources have been created.
3. Check that the Knative Eventing resources have been created by entering:

```terminal
$ oc get pods -n knative-eventing
```

Example output

```terminal
NAME                                   READY   STATUS    RESTARTS   AGE
broker-controller-58765d9d49-g9zp6     1/1     Running   0          7m21s
eventing-controller-65fdd66b54-jw7bh   1/1     Running   0          7m31s
eventing-webhook-57fd74b5bd-kvhlz      1/1     Running   0          7m31s
imc-controller-5b75d458fc-ptvm2        1/1     Running   0          7m19s
imc-dispatcher-64f6d5fccb-kkc4c        1/1     Running   0          7m18s
```


# Installing Knative broker for Apache Kafka

The Knative broker implementation for Apache Kafka provides integration options for you to use supported versions of the Apache Kafka message streaming platform with OpenShift Serverless. Knative broker for Apache Kafka functionality is available in an OpenShift Serverless installation if you have installed the KnativeKafka custom resource.

* You have installed the OpenShift Serverless Operator and Knative Eventing on your cluster.
* You have access to a Red Hat AMQ Streams cluster.
* Install the OpenShift CLI (oc) if you want to use the verification steps.
* You have cluster administrator permissions on OpenShift Container Platform, or you have cluster or dedicated administrator permissions on Red Hat OpenShift Service on AWS or OpenShift Dedicated.
* You are logged in to the OpenShift Container Platform web console.

1. In the Administrator perspective, navigate to Operators -> Installed Operators.
2. Check that the Project dropdown at the top of the page is set to Project: knative-eventing.
3. In the list of Provided APIs for the OpenShift Serverless Operator, find the Knative Kafka box and click Create Instance.
4. Configure the KnativeKafka object in the Create Knative Kafka page.

[IMPORTANT]
----
To use the Kafka channel, source, broker, or sink on your cluster, you must toggle the enabled switch for the options you want to use to true. These switches are set to false by default. Additionally, to use the Kafka channel, broker, or sink you must specify the bootstrap servers.
----
* Use the form for simpler configurations that do not require full control of KnativeKafka object creation.
* Edit the YAML for more complex configurations that require full control of KnativeKafka object creation. You can access the YAML by clicking the Edit YAML link on the Create Knative Kafka page.
Example KnativeKafka custom resource

```yaml
apiVersion: operator.serverless.openshift.io/v1alpha1
kind: KnativeKafka
metadata:
    name: knative-kafka
    namespace: knative-eventing
spec:
    channel:
        enabled: true 1
        bootstrapServers: <bootstrap_servers> 2
    source:
        enabled: true 3
    broker:
        enabled: true 4
        defaultConfig:
            bootstrapServers: <bootstrap_servers> 5
            numPartitions: <num_partitions> 6
            replicationFactor: <replication_factor> 7
    sink:
        enabled: true 8
    logging:
        level: INFO 9
```

Enables developers to use the KafkaChannel channel type in the cluster.
A comma-separated list of bootstrap servers from your AMQ Streams cluster.
Enables developers to use the KafkaSource event source type in the cluster.
Enables developers to use the Knative broker implementation for Apache Kafka in the cluster.
A comma-separated list of bootstrap servers from your Red Hat AMQ Streams cluster.
Defines the number of partitions of the Kafka topics, backed by the Broker objects. The default is 10.
Defines the replication factor of the Kafka topics, backed by the Broker objects. The default is 3. The replicationFactor value must be less than or equal to the number of nodes of your Red Hat AMQ Streams cluster.
Enables developers to use a Kafka sink in the cluster.
Defines the log level of the Kafka data plane. Allowed values are TRACE, DEBUG, INFO, WARN and ERROR. The default value is INFO.

[WARNING]
----
Do not use DEBUG or TRACE as the logging level in production environments. The outputs from these logging levels are verbose and can degrade performance.
----
5. Click Create after you have completed any of the optional configurations for Kafka. You are automatically directed to the Knative Kafka tab where knative-kafka is in the list of resources.

1. Click on the knative-kafka resource in the Knative Kafka tab. You are automatically directed to the Knative Kafka Overview page.
2. View the list of Conditions for the resource and confirm that they have a status of True.
![Kafka Knative Overview page showing Conditions]

If the conditions have a status of Unknown or False, wait a few moments to refresh the page.
3. Check that the Knative broker for Apache Kafka resources have been created:

```terminal
$ oc get pods -n knative-eventing
```

Example output

```terminal
NAME                                        READY   STATUS    RESTARTS   AGE
kafka-broker-dispatcher-7769fbbcbb-xgffn    2/2     Running   0          44s
kafka-broker-receiver-5fb56f7656-fhq8d      2/2     Running   0          44s
kafka-channel-dispatcher-84fd6cb7f9-k2tjv   2/2     Running   0          44s
kafka-channel-receiver-9b7f795d5-c76xr      2/2     Running   0          44s
kafka-controller-6f95659bf6-trd6r           2/2     Running   0          44s
kafka-source-dispatcher-6bf98bdfff-8bcsn    2/2     Running   0          44s
kafka-webhook-eventing-68dc95d54b-825xs     2/2     Running   0          44s
```


# Next steps

* Learn more about how to use Knative event-driven architecture in Knative Eventing.
* If you want to use Knative Eventing with Apache Kafka, see Configuring Knative broker for Apache Kafka.
* If you want to use Knative services, see Installing Knative Serving and then start Creating serverless applications.