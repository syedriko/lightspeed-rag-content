# Configuring OpenShift Serverless Functions


To improve the process of deployment of your application code, you can use OpenShift Serverless to deploy stateless, event-driven functions as a Knative service on OpenShift Container Platform. If you want to develop functions, you must complete the set up steps.

# Prerequisites

To enable the use of OpenShift Serverless Functions on your cluster, you must complete the following steps:

* The OpenShift Serverless Operator and Knative Serving are installed on your cluster.

[NOTE]
----
Functions are deployed as a Knative service. If you want to use event-driven architecture with your functions, you must also install Knative Eventing.
----
* You have the oc CLI installed.
* You have the Knative (kn) CLI installed. Installing the Knative CLI enables the use of kn func commands which you can use to create and manage functions.
* You have installed Docker Container Engine or Podman version 3.4.7 or higher.
* You have access to an available image registry, such as the OpenShift Container Registry.
* If you are using Quay.io as the image registry, you must ensure that either the repository is not private, or that you have followed the OpenShift Container Platform documentation on Allowing pods to reference images from other secured registries.
* If you are using the OpenShift Container Registry, a cluster administrator must expose the registry.

# Setting up Podman

To use advanced container management features, you might want to use Podman with OpenShift Serverless Functions. To do so, you need to start the Podman service and configure the Knative (kn) CLI to connect to it.

1. Start the Podman service that serves the Docker API on a UNIX socket at ${XDG_RUNTIME_DIR}/podman/podman.sock:

```terminal
$ systemctl start --user podman.socket
```


[NOTE]
----
On most systems, this socket is located at /run/user/$(id -u)/podman/podman.sock.
----
2. Establish the environment variable that is used to build a function:

```terminal
$ export DOCKER_HOST="unix://${XDG_RUNTIME_DIR}/podman/podman.sock"
```

3. Run the build command inside your function project directory with the -v flag to see verbose output. You should see a connection to your local UNIX socket:

```terminal
$ kn func build -v
```


# Setting up Podman on macOS

To use advanced container management features, you might want to use Podman with OpenShift Serverless Functions. To do so on macOS, you need to start the Podman machine and configure the Knative (kn) CLI to connect to it.

1. Create the Podman machine:

```terminal
$ podman machine init --memory=8192 --cpus=2 --disk-size=20
```

2. Start the Podman machine, which serves the Docker API on a UNIX socket:

```terminal
$ podman machine start
Starting machine "podman-machine-default"
Waiting for VM ...
Mounting volume... /Users/myuser:/Users/user

[...truncated output...]

You can still connect Docker API clients by setting DOCKER_HOST using the
following command in your terminal session:

	export DOCKER_HOST='unix:///Users/myuser/.local/share/containers/podman/machine/podman-machine-default/podman.sock'

Machine "podman-machine-default" started successfully
```


[NOTE]
----
On most macOS systems, this socket is located at /Users/myuser/.local/share/containers/podman/machine/podman-machine-default/podman.sock.
----
3. Establish the environment variable that is used to build a function:

```terminal
$ export DOCKER_HOST='unix:///Users/myuser/.local/share/containers/podman/machine/podman-machine-default/podman.sock'
```

4. Run the build command inside your function project directory with the -v flag to see verbose output. You should see a connection to your local UNIX socket:

```terminal
$ kn func build -v
```


# Next steps

* For more information about Docker Container Engine or Podman, see Container build tool options.
* See Getting started with functions.